[["sec-edge-case-studies.html", "6 Case Studies 6.1 Case Study Structure: 6.2 Case Study 1: Low DTM complexity 6.3 Case Study 2: No Vegetation 6.4 Case Study 3: Narrow/Wide Roads 6.5 Case Study 4: Drivable Width Thresholds", " 6 Case Studies In this section, we present four case studies where the measure_road() standard parameters (see section 5 may require tuning: Case Study 1: Low DTM complexity Case Study 2: No vegetation Case Study 2: Narrow/Wide Roads Case Study 3: Drivable Width Thresholds 6.1 Case Study Structure: For each case study, we include code snippets outlining how to: Read the required input data (refer to section 3 for detailed information). Check the Coordinate Reference System (CRS) of input data and clip the existing road network to the spatial extent of the LAS catalog. Update the existing road network using the measure_roads() function from the ALSroads package. Adjust the standard road extraction parameters to improve method accuracy (see section 5 for information on the standard parameters). Visualize road extraction results. Each case study is ‘stand-alone’, and users do not need to refer to other sections of the user guide. As such, some code snippets, such as loading data, are repeated for each case study. 6.2 Case Study 1: Low DTM complexity 6.2.1 Overview: The road extraction method developed by Roussel et al. (2022) uses the geometry of the terrain to correctly relocate and measure the roads. Under ideal circumstances, a road is expected to be flat with steep slopes on its edges (shoulders or embankments). The road is embedded within an environment and surrounded by complex and non-flat topography. Under these assumptions, a road is not that hard to find and measure. However, problems arise when there is no geometry to detect. This may happen, for example, if the roads are not shaped with ditches on their sides. In this case, the algorithm is supposed to work with a “rescue method” (see section 5.3) that does not use the shoulders but instead the terrain complexity. Ultimately, if the terrain is perfectly flat, there are no geometrical features that can be used to detect the road. In the following example, we present a method for adjusting the measure_roads() standard parameters to detect roads in a landscape where the topography is almost perfectly flat, roads are not nicely shaped, and standard road extraction is challenging. As the 3D plot of the ground points demonstrates here, the road is easily identifiable, but there is no geometrical feature that can be used to measure it. The road is flat in a flat environment. las &lt;- readLAS(&quot;data/06/01/road_10462.las&quot;) plot(filter_ground(las), bg = &quot;white&quot;) The road extraction method computes a conductivity layer from the point cloud to estimate how easy/difficult it is for an agent to move between two adjacent pixels. Lets look at the conductivity layer of the road in this case study: sig = ALSroads::rasterize_conductivity(las, dtm_cs1) #&gt; ........ plot(sig, col = viridis::inferno(50)) As we can see the conductivity map is absolutely perfect. Geometrical features (shoulders or embankments) are not that important to locate the road. Many other features are used, including the vegetation and the local density of point. Thus the road centerline will be perfectly relocated even if the road is flat in a flat environment. The measurement of the road width is likely to fail because of the absence of clear geometry (shoulders or embankments). Below we can see a slice of the point cloud perpendicularly to the road. For a better understanding of the figure users should refer to section 5. The key focus of this figure are the red and green arrows that represent the total road width and the drivable width, respectively. The algorithm has determined the road to be 21 m wide, which is clearly incorrect in this case study. The reason the algorithm overestimates the road width in this case study is because the landscape surrounding the road is perfectly flat and there is nothing to constrain the road width. By altering the default measure_roads() parameter to be more aggressive and less tolerant to various sources of noise we can relocate the road more accurately. In this specific slice, 6 m is probably an minor underestimation of the true road width. Users must remember that measurements are performed on numerous consecutive slices and averaged (see section 5.1 for information on road slices). For this specific road, the default parameters result in the road being classified as a 13.6 m wide (total width) ‘Class 2’ road. Once the parameters are adjusted, the road is classified as a 7.6 m (total width) Class 1 road. The custom parameters result in a road width and the Class that are are more representative of the real road. If the method classifies the road width as 13.6 m, many points will be found above the road (i.e., vegetation). This interpretation impacts the road classification (see section 5.6) as the method assesses the road as having vegetation on it, which would limit road drivablilty. However, if the true road width is only 7.6 m then the algorithm will not find vegetation on the road, as this vegetation is beyond the road edge boundaries, and the road will determined to be a very clean ‘Class 1’ road. Tuning the `measure_roads()` parameters on a road-by-road basis is not possible or suitable for updating extensive forest road networks. Doing so would defeat the purpose of the method, which is to automatically update road networks. Instead of tuning parameters to suit individual roads, users should tune parameters by landscape. In this case study, the custom parameters work well, but generally the default parameters are preferable. It is important to remember that this is an edge case and represents and extreme scenario. 6.2.2 Data, Method, and Application: The follow sections present, example code and method implementation for the adjustment of parameters in a low DTM complexity case study. 6.2.3 Required R Packages: remotes::install_github(&quot;Jean-Romain/ALSroads&quot;) #Install the ALSroads Package library(&quot;ALSroads&quot;) library(&quot;lidR&quot;) library(&quot;raster&quot;) library(&quot;sf&quot;) library(&quot;ggplot2&quot;) 6.2.3.1 Loading Data: ctg &lt;- readLAScatalog&quot;path/to/ctg/files&quot;, filter = &quot;-drop_withheld-keep_random_fraction 0.25&quot;) dtm &lt;- raster(&quot;path/to/dtm.tif&quot;) roads &lt;- st_read(&quot;path/to/roads&quot;) st_crs(roads) = st_crs(ctg) roads = sf::st_crop(roads, ctg) 6.2.3.2 Parameter Tuning The measure_roads() terrain parameters dictate how the method handles DTM complexity (see section 5.3). The standard terrain parameters are: max_elevation_ground_points: Default = 0.1 max_sd_ground_points: Default = 0.15 In a low DTM complexity area decreasing the max_elevation_ground_points and max_sd_ground_points improves the accuracy of road extraction. In this case study we decrees the max_elevation_ground_points to 0.07 and decrees the max_sd_ground_points to 0.04. custom_param = alsroads_default_parameters custom_param$terrain$max_elevation_ground_points = 0.07 custom_param$terrain$max_sd_ground_points = 0.04 updated_roads_custom_param &lt;- measure_roads(ctg = ctg, roads = roads, dtm = dtm, param = custom_param) 6.2.4 Results: Plotting the updated road network alongside the existing road network allows the visualization of the updated roads. 6.3 Case Study 2: No Vegetation 6.3.1 Overview: The road extraction method developed by Roussel et al. (2022) uses road edge vegetation to correctly position the updated road. There are three possible vegetation scenarios: 1) the road is nicely shaped by vegetation and the algorithm can accurately update the road, 2) DTM is very flat and locating the road is a challenge (see Case Study 1: Low DTM complexity), or 3) the road is not highlighted enough compared to the surrounding vegetation and cannot be located. The example case study roads are located in the northern portion of the Romeo Malette Forest, in the province of Ontario. #las_cs2 &lt;- readLAS(&quot;data/06/02/ctg/1kmZ174510538902018L.laz&quot;) #las_c &lt;- clip_circle(las_cs2, 451400, 5389750, 500) #plot(las_c, bg = &quot;white&quot;, size = 3) #add_dtm3d(x, dtm_cs2) 6.3.2 Data, Method, and Application: 6.3.2.1 Required R Packages: remotes::install_github(&quot;Jean-Romain/ALSroads&quot;) #Install the ALSroads Package library(&quot;ALSroads&quot;) library(&quot;lidR&quot;) library(&quot;raster&quot;) library(&quot;sf&quot;) library(&quot;ggplot2&quot;) 6.3.2.2 Loading Data: ctg &lt;- readLAScatalog&quot;path/to/ctg/files&quot;, filter = &quot;-drop_withheld-keep_random_fraction 0.25&quot;) dtm &lt;- raster(&quot;path/to/dtm.tif&quot;) roads &lt;- st_read(&quot;path/to/roads&quot;) st_crs(roads) = st_crs(ctg) roads = sf::st_crop(roads, ctg) 6.3.2.3 Parameter Tuning: custom_param = alsroads_default_parameters custom_param$state$drivable_width_thresholds = c(3, 8) updated_roads_custom_param &lt;- measure_roads(ctg = ctg, roads = roads, dtm = dtm, param = custom_param) 6.3.3 Results: Plotting the updated road network alongside the existing road network allows the visualization of the updated roads. 6.4 Case Study 3: Narrow/Wide Roads 6.4.1 Overview: The road extraction method developed by Roussel et al. (2022) updated an existing road network by searching within a buffer area of the existing road for an updated road line. The algorithm processes only the point cloud within the buffer around the reference roads (see section 5.1). This value corresponds to the biggest road offset error (i.e., how incorrect the existing road track is) that can be fixed by the method. In some circumstances users may know that the updated is beyond the standard road buffer distance (80 m) and tune the road_buffer parameter accordingly. Similar, if a user knows that the maximum road track error is less than the standard buffer theroad_buffercan be reduced to increase accuracy and reduce computation. In this case study we demonstrate how users can tune measure_roads parameters in an area where the updated road is very close to the existing road. The example case study roads are located in the eastern portion of the Romeo Malette Forest, located in the province of Ontario. 6.4.2 Data, Method, and Application: 6.4.2.1 Required R Packages: remotes::install_github(&quot;Jean-Romain/ALSroads&quot;) #Install the ALSroads Package library(&quot;ALSroads&quot;) library(&quot;lidR&quot;) library(&quot;raster&quot;) library(&quot;sf&quot;) library(&quot;ggplot2&quot;) 6.4.2.2 Loading Data: ctg &lt;- readLAScatalog&quot;path/to/ctg/files&quot;, filter = &quot;-drop_withheld-keep_random_fraction 0.25&quot;) dtm &lt;- raster(&quot;path/to/dtm.tif&quot;) roads &lt;- st_read(&quot;path/to/roads&quot;) st_crs(roads) = st_crs(ctg) roads = sf::st_crop(roads, ctg) 6.4.2.3 Parameter Tuning: The measure_roads() extraction parameters include a parameter called road_buffer for defining the road buffer width (see section 5.1). The default road_buffer distance is 80 m, but in this case study we know that the updated road is &lt; 10 m from the existing road network. In this case study we decrees the road_buffer to 40 m custom_param = alsroads_default_parameters custom_param$extraction$road_buffer = 40 updated_roads_custom_param &lt;- measure_roads(ctg = ctg, roads = roads, dtm = dtm, param = custom_param) 6.4.3 Results: In this case study adjusting the road_buffer distance impacted the location road centerline. By comparing the 1) existing road network, 2) updated road using an 80 m buffer (the default value), and 3) the updated road using an 40 m buffer we can see that the road centerline location has altered: 6.5 Case Study 4: Drivable Width Thresholds 6.5.1 Overview: The road extraction method developed by Roussel et al. (2022) updates an existing road network by assigning a Class (1-4), which indicates the road stare, to each road. The class is defined by assessing several road state parameters (see 5.6). It is not recommended for users to edit the road state parameters unless specifically required. For example, users may have a specific value for defining the drivable_width_thresholds of a road that exceeds the measure_roads() default thresholds (c(1, 5)). In some circumstances users may know that the drivable width of a road is more or less than the standard thresholds and may tine the drivable_width_threshold accordinginly. In this case study we demonstrate how users can tune measure_roads() parameters in an area where the the drivable_width_thresholds of roads exceed the standard parameters. The example case study roads are located in the eastern portion of the Nipissing Forest, in the province of Ontario. 6.5.2 Data, Method, and Application: 6.5.2.1 Required R Packages: remotes::install_github(&quot;Jean-Romain/ALSroads&quot;) #Install the ALSroads Package library(&quot;ALSroads&quot;) library(&quot;lidR&quot;) library(&quot;raster&quot;) library(&quot;sf&quot;) library(&quot;ggplot2&quot;) 6.5.2.2 Loading Data: ctg &lt;- readLAScatalog&quot;path/to/ctg/files&quot;, filter = &quot;-drop_withheld-keep_random_fraction 0.25&quot;) dtm &lt;- raster(&quot;path/to/dtm.tif&quot;) roads &lt;- st_read(&quot;path/to/roads&quot;) st_crs(roads) = st_crs(ctg) roads = sf::st_crop(roads, ctg) 6.5.2.3 Parameter Tuning: The measure_roads() road state parameters include a parameter called drivable_width_thresholds for assigning drivable width thresholds (see section 5.6). The default drivable_width_thresholdsare c(1, 5), but in this case study we know roads under 3 m are not drivable, and roads over 8 m are good roads. We set the drivable_width_thresholds to c(5, 8) meaning that roads with drivable widths over 8 m are assigned a score of 100 and roads with a width less than 5 m are assigned a score of 0 (there is a linear relationship between 5 and 8 m). custom_param = alsroads_default_parameters custom_param$state$drivable_width_thresholds = c(5, 8) updated_roads_custom_param &lt;- measure_roads(ctg = ctg, roads = roads, dtm = dtm, param = custom_param) 6.5.3 Results: Results show that when the drivable_width_thresholds is changed to c(5, 8) fewer roads are classified as Class 1 and Class 2 (i.e., drivable roads). Compared to the updated road network using standard parameters, where no roads were Class 3 or 4, the updated road network using custom parameters includes two roads of Class 3 (i.e., not drivable). These results demonstrate that changing the drivable_width_thresholds impacts the road Class by considering roads beyond the minimum road width threshold, in this case 5 m, as not drivable. Note: In this case study area there are no Class 4 roads. ggplot(upd_rds_custom_and_standard_cs4, aes(factor(CLASS))) + geom_bar(aes(fill = Param), position = &quot;dodge&quot;, stat=&quot;count&quot;, width= 0.5) + theme_minimal() + theme(legend.position=&quot;bottom&quot;) + scale_fill_discrete(name=NULL, labels = c(&quot;Custom Parameters&quot;, &quot;Standard Parameters&quot;)) + labs(y = &quot;Count&quot;, x = &quot;Road Class&quot;) "],["404.html", "Page not found", " Page not found The page you requested cannot be found (perhaps it was moved or renamed). You may want to try searching to find the page's new location, or use the table of contents to find the page you are looking for. "]]
